max_cpu_seconds=3

files=exact_price_or_not.c

compilers=[['clang']]

compiler_args=-Wall -Werror -g -fsanitize=address,undefined test_exact_price_or_not.c exact_price_or_not.c -o test_exact_price_or_not

command=./test_exact_price_or_not

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="150\n3\n50\n50\n50\n"

2 stdin="400\n6\n50\n10\n20\n10\n100\n200\n"

3 stdin="500\n3\n200\n200\n200\n"

4 stdin="6\n8\n2\n5\n2\n6\n2\n1\n7\n3\n"

5 stdin="40\n8\n16\n78\n53\n32\n14\n63\n83\n10\n"

6 stdin="5\n3\n2\n3\n1\n"

7 stdin="64\n9\n72\n47\n25\n97\n51\n36\n42\n26\n13\n"

## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:




### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='1\n'
2 expected_stdout='0\n'
3 expected_stdout='0\n'
4 expected_stdout='1\n'
5 expected_stdout='1\n'
6 expected_stdout='0\n'
7 expected_stdout='1\n'

max_cpu_seconds=3

files=graph_detect_cycle.c

compilers=[['clang']]

compiler_args=-Wall -Werror -g -fsanitize=address,leak,undefined -o test_graph_detect_cycle.c graph_detect_cycle.c Graph.c -o test_graph_detect_cycle

command=./test_graph_detect_cycle

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="5\n0 <-> 1\n1 <-> 2\n2 <-> 3\n3 <-> 4\n4 <-> 0\n"

2 stdin="5\n0 <-> 1\n1 <-> 2\n2 <-> 3\n0 <-> 4\n4 <-> 2\n"

3 stdin="5\n0 <-> 1\n1 <-> 2\n2 <-> 3\n0 <-> 4\n"

4 stdin="6\n0 <-> 4\n4 <-> 6\n4 <-> 5\n4 <-> 1\n1 <-> 2\n2 <-> 3\n"

5 stdin="6\n0 <-> 4\n4 <-> 6\n4 <-> 5\n4 <-> 1\n1 <-> 2\n2 <-> 3\n3 <-> 5\n"

6 stdin="3\n0 <-> 1\n1 <-> 2\n0 <-> 2\n"

7 stdin="7\n0 <-> 1\n1 <-> 2\n2 <-> 3\n3 <-> 4\n4 <-> 5\n5 <-> 6\n"

8 stdin="7\n0 <-> 1\n1 <-> 2\n2 <-> 3\n2 <-> 4\n2 <-> 5\n2 <-> 6\n"

9 stdin="7\n0 <-> 1\n1 <-> 2\n2 <-> 3\n2 <-> 4\n2 <-> 5\n2 <-> 6\n6 <-> 0\n"

## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You can manually write them, or generate them
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest




### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='Has cycle\n'
2 expected_stdout='Has cycle\n'
3 expected_stdout='Does not have cycle\n'
4 expected_stdout='Does not have cycle\n'
5 expected_stdout='Has cycle\n'
6 expected_stdout='Has cycle\n'
7 expected_stdout='Does not have cycle\n'
8 expected_stdout='Does not have cycle\n'
9 expected_stdout='Has cycle\n'